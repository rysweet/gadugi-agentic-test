/**
 * IssueReporter Agent Usage Examples
 * 
 * Demonstrates how to use the IssueReporter agent for GitHub integration
 * in test failure scenarios.
 */

import { IssueReporter, createIssueReporter, IssueReporterConfig } from '../IssueReporter';
import { TestFailure, Priority } from '../../models/TestModels';

/**
 * Example configuration for GitHub integration
 */
const exampleConfig: IssueReporterConfig = {
  token: process.env.GITHUB_TOKEN || 'your-github-token',
  owner: 'your-org',
  repository: 'your-repo',
  baseBranch: 'main',
  createIssuesOnFailure: true,
  issueLabels: ['bug', 'test-failure', 'automated'],
  issueTitleTemplate: '[TEST FAILURE] {{scenarioName}} - {{failureMessage}}',
  issueBodyTemplate: `## Test Failure Report

**Scenario:** {{scenarioName}} ({{scenarioId}})
**Failure Time:** {{timestamp}}
**Priority:** {{priority}}

### Error Details
\`\`\`
{{failureMessage}}
\`\`\`

{{#stackTrace}}
### Stack Trace
\`\`\`
{{stackTrace}}
\`\`\`
{{/stackTrace}}

### Reproduction Steps
{{#reproductionSteps}}
{{#each this}}
{{@index}}. {{this}}
{{/each}}
{{/reproductionSteps}}

### Environment Information
- **Platform:** {{systemInfo.platform}} {{systemInfo.arch}}
- **Node Version:** {{systemInfo.nodeVersion}}
{{#systemInfo.electronVersion}}
- **Electron Version:** {{systemInfo.electronVersion}}
{{/systemInfo.electronVersion}}

{{#screenshots}}
### Screenshots
{{#each this}}
- ![Screenshot]({{this}})
{{/each}}
{{/screenshots}}

---
*This issue was automatically generated by the Agentic Testing System*`,
  createPullRequestsForFixes: false,
  autoAssignUsers: ['maintainer1', 'maintainer2'],
  enableDeduplication: true,
  deduplicationLookbackDays: 30,
  rateLimitBuffer: 50
};

/**
 * Example test failure data
 */
const exampleFailure: TestFailure = {
  scenarioId: 'spa-build-test',
  timestamp: new Date(),
  message: 'Build process failed with compilation errors in TypeScript files',
  stackTrace: `Error: Command failed: npm run build
    at ChildProcess.<anonymous> (/path/to/test.js:45:12)
    at ChildProcess.emit (events.js:315:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)`,
  failedStep: 2,
  screenshots: [
    'screenshots/build-error-1.png',
    'screenshots/build-error-2.png'
  ],
  logs: [
    'ERROR: Cannot find module @types/node',
    'ERROR: Property does not exist on type',
    'ERROR: Build failed with 3 errors'
  ],
  category: 'build-failure',
  isKnownIssue: false
};

/**
 * Basic usage example
 */
async function basicUsageExample(): Promise<void> {
  console.log('=== Basic IssueReporter Usage Example ===\n');

  try {
    // Create and initialize the agent
    const issueReporter = createIssueReporter(exampleConfig);
    await issueReporter.initialize();

    console.log('‚úì IssueReporter initialized successfully');

    // Create an issue from a test failure
    const issue = await issueReporter.createIssue(exampleFailure);
    console.log(`‚úì Issue created: #${issue.issueNumber}`);
    console.log(`  URL: ${issue.url}`);

    // Add a comment with additional information
    await issueReporter.addComment(issue.issueNumber, 
      '## Additional Investigation\n\nThis appears to be related to a recent dependency update. Investigating further...'
    );
    console.log('‚úì Comment added to issue');

    // Assign users to the issue
    await issueReporter.assignUsers(issue.issueNumber, ['developer1']);
    console.log('‚úì Issue assigned to developer1');

    // Clean up
    await issueReporter.cleanup();
    console.log('‚úì IssueReporter cleaned up');

  } catch (error) {
    console.error('‚ùå Error in basic usage example:', (error as Error).message);
  }
}

/**
 * Advanced features example
 */
async function advancedFeaturesExample(): Promise<void> {
  console.log('\n=== Advanced Features Example ===\n');

  try {
    const issueReporter = createIssueReporter({
      ...exampleConfig,
      enableDeduplication: true,
      screenshotStorage: 'attach'
    });
    
    await issueReporter.initialize();

    // Check rate limit status
    const rateLimitInfo = await issueReporter.getRateLimitInfo();
    console.log('‚úì Rate limit info:', {
      remaining: rateLimitInfo.remaining,
      limit: rateLimitInfo.limit,
      resetTime: rateLimitInfo.reset.toISOString()
    });

    // Create issue (will check for duplicates first)
    const issue = await issueReporter.createIssue(exampleFailure);
    console.log(`‚úì Issue created with deduplication: #${issue.issueNumber}`);

    // Attach a screenshot
    try {
      const screenshotUrl = await issueReporter.attachScreenshot(
        issue.issueNumber, 
        'screenshots/build-error-1.png'
      );
      console.log(`‚úì Screenshot attached: ${screenshotUrl}`);
    } catch (error) {
      console.log('‚ö† Screenshot attachment skipped (file not found)');
    }

    // Link to related issues
    await issueReporter.linkIssues(issue.issueNumber, [123, 456], 'relates');
    console.log('‚úì Issue linked to related issues');

    // Update issue state
    await issueReporter.updateIssue(issue.issueNumber, {
      labels: ['bug', 'test-failure', 'priority:high', 'needs-investigation']
    });
    console.log('‚úì Issue labels updated');

    await issueReporter.cleanup();

  } catch (error) {
    console.error('‚ùå Error in advanced features example:', (error as Error).message);
  }
}

/**
 * Pull request creation example
 */
async function pullRequestExample(): Promise<void> {
  console.log('\n=== Pull Request Creation Example ===\n');

  try {
    const issueReporter = createIssueReporter(exampleConfig);
    await issueReporter.initialize();

    // Create a pull request for a fix
    const pr = await issueReporter.createPullRequest({
      title: 'Fix: Resolve TypeScript build errors in test scenarios',
      body: `## Summary
This PR fixes the TypeScript compilation errors that were causing test failures.

## Changes
- Updated type definitions for test models
- Fixed import paths in agent modules
- Added missing dependencies

## Testing
- [x] All existing tests pass
- [x] New build pipeline succeeds
- [x] Manual testing completed

Fixes #${123} // Issue number would come from createIssue result`,
      head: 'fix/typescript-build-errors',
      base: 'main',
      draft: false,
      maintainer_can_modify: true
    });

    console.log(`‚úì Pull request created: #${pr.prNumber}`);
    console.log(`  URL: ${pr.url}`);

    await issueReporter.cleanup();

  } catch (error) {
    console.error('‚ùå Error in pull request example:', (error as Error).message);
  }
}

/**
 * Batch operations example
 */
async function batchOperationsExample(): Promise<void> {
  console.log('\n=== Batch Operations Example ===\n');

  const multipleFailures: TestFailure[] = [
    {
      ...exampleFailure,
      scenarioId: 'ui-navigation-test',
      message: 'Navigation menu fails to load',
      category: 'ui-failure'
    },
    {
      ...exampleFailure,
      scenarioId: 'api-integration-test',
      message: 'API endpoint returns 500 error',
      category: 'api-failure'
    },
    {
      ...exampleFailure,
      scenarioId: 'database-connection-test',
      message: 'Cannot connect to database',
      category: 'infrastructure-failure'
    }
  ];

  try {
    const issueReporter = createIssueReporter(exampleConfig);
    await issueReporter.initialize();

    const createdIssues: number[] = [];

    // Create issues for multiple failures
    for (const failure of multipleFailures) {
      try {
        const issue = await issueReporter.createIssue(failure);
        createdIssues.push(issue.issueNumber);
        console.log(`‚úì Issue created for ${failure.scenarioId}: #${issue.issueNumber}`);
        
        // Small delay to respect rate limits
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        console.error(`‚ùå Failed to create issue for ${failure.scenarioId}:`, (error as Error).message);
      }
    }

    // Link all issues as related
    if (createdIssues.length > 1) {
      const mainIssue = createdIssues[0];
      const relatedIssues = createdIssues.slice(1);
      
      await issueReporter.linkIssues(mainIssue, relatedIssues, 'relates');
      console.log(`‚úì Linked ${createdIssues.length} related issues`);
    }

    await issueReporter.cleanup();

  } catch (error) {
    console.error('‚ùå Error in batch operations example:', (error as Error).message);
  }
}

/**
 * Run all examples
 */
async function runAllExamples(): Promise<void> {
  console.log('üöÄ IssueReporter Agent Examples\n');
  console.log('Note: These examples require a valid GitHub token and will create real issues/PRs\n');

  // Check if we have a GitHub token
  if (!process.env.GITHUB_TOKEN) {
    console.log('‚ö† GITHUB_TOKEN environment variable not set. Examples will fail.');
    console.log('  Set GITHUB_TOKEN to run these examples with real GitHub API calls.\n');
  }

  await basicUsageExample();
  await advancedFeaturesExample();
  await pullRequestExample();
  await batchOperationsExample();

  console.log('\n‚úÖ All examples completed!');
}

// Run examples if this file is executed directly
if (require.main === module) {
  runAllExamples().catch(console.error);
}

// Export examples for use in tests or documentation
export {
  basicUsageExample,
  advancedFeaturesExample,
  pullRequestExample,
  batchOperationsExample,
  runAllExamples,
  exampleConfig,
  exampleFailure
};