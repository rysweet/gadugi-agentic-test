# TUI Testing Scenario Examples
# Comprehensive YAML scenarios for testing Terminal User Interface applications
# These scenarios demonstrate various TUI testing patterns and capabilities

# Basic TUI Application Test
basic_tui_test:
  id: "basic-tui-test"
  name: "Basic TUI Application Test"
  description: "Test basic TUI application interaction with echo command"
  type: "tui"
  agent: "TUIAgent"
  timeout: 30000

  environment:
    TERM: "xterm-256color"
    COLUMNS: "80"
    LINES: "24"

  setup:
    working_directory: "/tmp"
    terminal_size:
      cols: 80
      rows: 24

  steps:
    - action: "spawn"
      target: "echo 'Hello TUI World'"
      description: "Spawn echo command"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Hello TUI World"
      description: "Wait for expected output"
      timeout: 3000

    - action: "validate_output"
      target: "session"
      expected: "contains:Hello TUI World"
      description: "Validate output contains expected text"

    - action: "capture_output"
      target: "session"
      description: "Capture final output for analysis"

  expected_results:
    exit_code: 0
    output_contains: ["Hello TUI World"]

  cleanup:
    - action: "kill_session"
      target: "session"

# Interactive TUI Application Test
interactive_tui_test:
  id: "interactive-tui-test"
  name: "Interactive TUI Application Test"
  description: "Test interactive TUI application with user input simulation"
  type: "tui"
  agent: "TUIAgent"
  timeout: 45000

  environment:
    TERM: "xterm-256color"
    PS1: "$ "

  setup:
    working_directory: "/tmp"
    input_timing:
      keystroke_delay: 50
      response_delay: 100
      stabilization_timeout: 2000

  steps:
    - action: "spawn"
      target: "bash -c"
      value: "read -p 'Enter your name: ' name; echo 'Hello $name!'"
      description: "Spawn interactive bash command"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Enter your name:"
      description: "Wait for input prompt"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "Alice{Enter}"
      description: "Send user input with Enter key"
      timeout: 2000

    - action: "wait_for_output"
      target: "session"
      value: "Hello Alice!"
      description: "Wait for response"
      timeout: 3000

    - action: "validate_output"
      target: "session"
      expected:
        type: "contains"
        value: "Hello Alice!"
      description: "Validate personalized greeting"

  expected_results:
    exit_code: 0
    output_contains: ["Enter your name:", "Hello Alice!"]

# Menu Navigation Test
menu_navigation_test:
  id: "menu-navigation-test"
  name: "Menu Navigation Test"
  description: "Test navigation through interactive menu system"
  type: "tui"
  agent: "TUIAgent"
  timeout: 60000

  environment:
    TERM: "xterm-256color"

  setup:
    working_directory: "/tmp"
    create_files:
      - path: "menu_app.sh"
        content: |
          #!/bin/bash
          while true; do
            echo ""
            echo "=== Main Menu ==="
            echo "1. File Operations"
            echo "2. System Information"
            echo "3. Settings"
            echo "4. Exit"
            echo ""
            read -p "Select option (1-4): " choice

            case $choice in
              1)
                echo ""
                echo "=== File Operations ==="
                echo "a. List Files"
                echo "b. Create File"
                echo "c. Delete File"
                echo "d. Back to Main"
                read -p "File option: " file_choice
                case $file_choice in
                  a) echo "Listing files:"; ls -la ;;
                  b) echo "Enter filename:"; read filename; echo "Created: $filename" ;;
                  c) echo "File deletion simulated" ;;
                  d) continue ;;
                esac
                ;;
              2)
                echo "System Information:"
                uname -a
                echo "Current date: $(date)"
                ;;
              3)
                echo "Settings menu (placeholder)"
                ;;
              4)
                echo "Goodbye!"
                exit 0
                ;;
              *)
                echo "Invalid option. Please try again."
                ;;
            esac

            echo ""
            read -p "Press Enter to continue..." dummy
          done
        permissions: "755"

  steps:
    - action: "spawn"
      target: "bash menu_app.sh"
      description: "Start menu application"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "=== Main Menu ==="
      description: "Wait for main menu to appear"
      timeout: 3000

    - action: "validate_output"
      target: "session"
      expected: "regex:1\\. File Operations.*2\\. System Information.*3\\. Settings.*4\\. Exit"
      description: "Validate menu structure"

    - action: "navigate_menu"
      target: "session"
      value: "File Operations,List Files"
      description: "Navigate to File Operations > List Files"
      timeout: 5000

    - action: "send_input"
      target: "session"
      value: "1{Enter}"
      description: "Select File Operations"

    - action: "wait_for_output"
      target: "session"
      value: "=== File Operations ==="
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "a{Enter}"
      description: "Select List Files"

    - action: "wait_for_output"
      target: "session"
      value: "Listing files:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "{Enter}"
      description: "Continue to main menu"

    - action: "send_input"
      target: "session"
      value: "2{Enter}"
      description: "Select System Information"

    - action: "wait_for_output"
      target: "session"
      value: "System Information:"
      timeout: 3000

    - action: "validate_output"
      target: "session"
      expected: "contains:Current date:"
      description: "Validate system info display"

    - action: "send_input"
      target: "session"
      value: "{Enter}"
      description: "Continue"

    - action: "send_input"
      target: "session"
      value: "4{Enter}"
      description: "Exit application"

    - action: "wait_for_output"
      target: "session"
      value: "Goodbye!"
      timeout: 3000

  expected_results:
    exit_code: 0
    output_contains: ["Main Menu", "File Operations", "System Information", "Goodbye!"]

# Color and Formatting Test
color_formatting_test:
  id: "color-formatting-test"
  name: "Color and Formatting Validation Test"
  description: "Test ANSI color codes and text formatting recognition"
  type: "tui"
  agent: "TUIAgent"
  timeout: 30000

  environment:
    TERM: "xterm-256color"
    FORCE_COLOR: "1"

  setup:
    working_directory: "/tmp"
    output_capture:
      preserve_colors: true
      capture_timing: true

  steps:
    - action: "spawn"
      target: "printf"
      value: "\\033[31m\\033[1mRed Bold\\033[0m \\033[32mGreen\\033[0m \\033[34m\\033[4mBlue Underline\\033[0m"
      description: "Generate colored output with formatting"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Red Bold Green Blue Underline"
      description: "Wait for formatted output"
      timeout: 3000

    - action: "validate_formatting"
      target: "session"
      value: |
        [
          {
            "text": "Red Bold",
            "fg": "red",
            "styles": ["bold"],
            "position": {"start": 0, "end": 8}
          },
          {
            "text": "Green",
            "fg": "green",
            "styles": [],
            "position": {"start": 9, "end": 14}
          },
          {
            "text": "Blue Underline",
            "fg": "blue",
            "styles": ["underline"],
            "position": {"start": 15, "end": 29}
          }
        ]
      description: "Validate color and formatting attributes"

    - action: "capture_output"
      target: "session"
      description: "Capture colored output for analysis"

  expected_results:
    colors_detected: true
    formatting_styles: ["bold", "underline"]
    foreground_colors: ["red", "green", "blue"]

# Performance Benchmark Test
performance_benchmark_test:
  id: "performance-benchmark-test"
  name: "TUI Performance Benchmark"
  description: "Benchmark TUI agent performance with high-frequency operations"
  type: "tui"
  agent: "TUIAgent"
  timeout: 120000

  environment:
    TERM: "xterm-256color"

  setup:
    working_directory: "/tmp"
    performance:
      enabled: true
      sample_rate: 1000
      memory_threshold: 100
      cpu_threshold: 80
    create_files:
      - path: "performance_test.sh"
        content: |
          #!/bin/bash
          echo "Starting performance test..."

          # High-frequency output test
          for i in {1..1000}; do
            if [ $((i % 100)) -eq 0 ]; then
              echo "Progress: $i/1000"
            fi
            echo "Line $i: $(date +%N)" > /dev/null
          done

          # Rapid input simulation test
          echo "Ready for input test"
          for j in {1..50}; do
            read -t 0.1 input
            echo "Received: $input"
          done

          echo "Performance test complete"
        permissions: "755"

  steps:
    - action: "spawn"
      target: "bash performance_test.sh"
      description: "Start performance test script"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Starting performance test..."
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Ready for input test"
      timeout: 30000

    - action: "send_input"
      target: "session"
      value: "test1{Enter}test2{Enter}test3{Enter}"
      timing: 10
      description: "Send rapid input sequence"

    - action: "wait_for_output"
      target: "session"
      value: "Performance test complete"
      timeout: 15000

    - action: "validate_output"
      target: "session"
      expected:
        type: "contains"
        value: "Progress: 1000/1000"
      description: "Validate completion marker"

  expected_results:
    max_duration: 60000
    memory_usage_mb: 50
    cpu_usage_percent: 70

# Cross-Platform Compatibility Test
cross_platform_test:
  id: "cross-platform-test"
  name: "Cross-Platform TUI Test"
  description: "Test TUI functionality across different platforms and shells"
  type: "tui"
  agent: "TUIAgent"
  timeout: 45000

  environment:
    TERM: "xterm-256color"

  setup:
    working_directory: "/tmp"
    cross_platform:
      key_mappings:
        linux:
          Enter: "\n"
          Tab: "\t"
          Escape: "\u001b"
          ArrowUp: "\u001b[A"
          ArrowDown: "\u001b[B"
        darwin:
          Enter: "\n"
          Tab: "\t"
          Escape: "\u001b"
          ArrowUp: "\u001b[A"
          ArrowDown: "\u001b[B"
        win32:
          Enter: "\r\n"
          Tab: "\t"
          Escape: "\u001b"
          ArrowUp: "\u001b[A"
          ArrowDown: "\u001b[B"

  steps:
    - action: "spawn"
      target: "echo"
      value: "Platform: ${process.platform}"
      description: "Detect current platform"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Platform:"
      timeout: 3000

    - action: "spawn"
      target: "bash -c"
      value: "echo 'Testing special keys:'; read -n 1 key; echo 'Key received'"
      description: "Test special key handling"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Testing special keys:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "{Enter}"
      description: "Send platform-specific Enter key"

    - action: "wait_for_output"
      target: "session"
      value: "Key received"
      timeout: 3000

    - action: "validate_output"
      target: "session"
      expected: "contains:Key received"
      description: "Validate key was processed correctly"

  expected_results:
    platform_detected: true
    key_handling_correct: true

# Error Handling and Recovery Test
error_handling_test:
  id: "error-handling-test"
  name: "Error Handling and Recovery Test"
  description: "Test TUI agent error handling and recovery mechanisms"
  type: "tui"
  agent: "TUIAgent"
  timeout: 60000

  environment:
    TERM: "xterm-256color"

  setup:
    working_directory: "/tmp"
    create_files:
      - path: "error_test.sh"
        content: |
          #!/bin/bash
          echo "Error handling test started"

          # Test 1: Command that doesn't exist
          echo "Test 1: Running non-existent command"
          nonexistent_command_12345 2>&1 || echo "Command not found (expected)"

          # Test 2: Process that exits with error
          echo "Test 2: Process with error exit"
          exit_with_error() {
            echo "About to exit with error"
            exit 1
          }
          exit_with_error || echo "Process exited with error (expected)"

          # Test 3: Timeout scenario
          echo "Test 3: Timeout test"
          timeout 1 sleep 5 || echo "Timeout occurred (expected)"

          # Test 4: Hanging process simulation
          echo "Test 4: Simulating hanging process"
          echo "Send SIGTERM to interrupt"
          sleep 10 &
          wait

          echo "Error handling test complete"
        permissions: "755"

  steps:
    - action: "spawn"
      target: "bash error_test.sh"
      description: "Start error handling test"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Error handling test started"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Command not found (expected)"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Process exited with error (expected)"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Timeout occurred (expected)"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Send SIGTERM to interrupt"
      timeout: 5000

    # Simulate killing hanging process
    - action: "wait"
      value: "2000"
      description: "Wait for process to start hanging"

    - action: "kill_session"
      target: "session"
      description: "Kill hanging session"

    - action: "validate_output"
      target: "session"
      expected:
        type: "contains"
        value: "Send SIGTERM to interrupt"
      description: "Validate test reached hanging point"

  expected_results:
    error_recovery: true
    timeout_handling: true
    process_kill_success: true

# Complex Interactive Application Test
complex_interactive_test:
  id: "complex-interactive-test"
  name: "Complex Interactive Application Test"
  description: "Test complex interactive TUI application with multiple states"
  type: "tui"
  agent: "TUIAgent"
  timeout: 90000

  environment:
    TERM: "xterm-256color"
    LC_ALL: "C"

  setup:
    working_directory: "/tmp"
    create_files:
      - path: "interactive_app.sh"
        content: |
          #!/bin/bash

          # State variables
          user_name=""
          user_age=""
          selected_option=""

          # Color codes
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color

          clear_screen() {
            echo -e "\033[2J\033[H"
          }

          show_header() {
            echo -e "${BLUE}================================================${NC}"
            echo -e "${BLUE}    Interactive TUI Application Demo${NC}"
            echo -e "${BLUE}================================================${NC}"
            echo ""
          }

          get_user_info() {
            echo -e "${YELLOW}User Information Setup${NC}"
            echo ""
            read -p "Enter your name: " user_name
            while true; do
              read -p "Enter your age: " user_age
              if [[ $user_age =~ ^[0-9]+$ ]] && [ $user_age -gt 0 ]; then
                break
              else
                echo -e "${RED}Please enter a valid age (positive number)${NC}"
              fi
            done
            echo ""
            echo -e "${GREEN}Hello $user_name (age $user_age)!${NC}"
            echo ""
          }

          show_menu() {
            echo -e "${YELLOW}Main Menu:${NC}"
            echo "1. View Profile"
            echo "2. Calculate Birth Year"
            echo "3. Age Category"
            echo "4. Settings"
            echo "5. Exit"
            echo ""
          }

          view_profile() {
            echo -e "${BLUE}User Profile:${NC}"
            echo "Name: $user_name"
            echo "Age: $user_age"
            echo "Category: $(get_age_category)"
            echo "Birth Year: $(($(date +%Y) - user_age))"
            echo ""
          }

          get_age_category() {
            if [ $user_age -lt 13 ]; then
              echo "Child"
            elif [ $user_age -lt 20 ]; then
              echo "Teenager"
            elif [ $user_age -lt 60 ]; then
              echo "Adult"
            else
              echo "Senior"
            fi
          }

          settings_menu() {
            while true; do
              echo -e "${YELLOW}Settings Menu:${NC}"
              echo "a. Change Name"
              echo "b. Change Age"
              echo "c. Reset Profile"
              echo "d. Back to Main Menu"
              echo ""
              read -p "Select option: " setting_choice

              case $setting_choice in
                a)
                  read -p "Enter new name: " user_name
                  echo -e "${GREEN}Name updated to: $user_name${NC}"
                  ;;
                b)
                  while true; do
                    read -p "Enter new age: " user_age
                    if [[ $user_age =~ ^[0-9]+$ ]] && [ $user_age -gt 0 ]; then
                      echo -e "${GREEN}Age updated to: $user_age${NC}"
                      break
                    else
                      echo -e "${RED}Please enter a valid age${NC}"
                    fi
                  done
                  ;;
                c)
                  user_name=""
                  user_age=""
                  echo -e "${GREEN}Profile reset${NC}"
                  get_user_info
                  ;;
                d)
                  break
                  ;;
                *)
                  echo -e "${RED}Invalid option${NC}"
                  ;;
              esac
              echo ""
            done
          }

          # Main application loop
          clear_screen
          show_header
          get_user_info

          while true; do
            show_menu
            read -p "Select option (1-5): " selected_option
            echo ""

            case $selected_option in
              1)
                view_profile
                ;;
              2)
                birth_year=$(($(date +%Y) - user_age))
                echo -e "${BLUE}Birth Year Calculation:${NC}"
                echo "Current year: $(date +%Y)"
                echo "Your age: $user_age"
                echo "Your birth year: $birth_year"
                echo ""
                ;;
              3)
                category=$(get_age_category)
                echo -e "${BLUE}Age Category:${NC}"
                echo "You are classified as: $category"
                echo ""
                ;;
              4)
                settings_menu
                ;;
              5)
                echo -e "${GREEN}Thank you for using the application, $user_name!${NC}"
                echo -e "${GREEN}Goodbye!${NC}"
                exit 0
                ;;
              *)
                echo -e "${RED}Invalid option. Please select 1-5.${NC}"
                echo ""
                ;;
            esac

            read -p "Press Enter to continue..." dummy
            echo ""
          done
        permissions: "755"

  steps:
    - action: "spawn"
      target: "bash interactive_app.sh"
      description: "Start complex interactive application"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Interactive TUI Application Demo"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "Enter your name:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "TestUser{Enter}"
      description: "Enter user name"

    - action: "wait_for_output"
      target: "session"
      value: "Enter your age:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "25{Enter}"
      description: "Enter user age"

    - action: "wait_for_output"
      target: "session"
      value: "Hello TestUser (age 25)!"
      timeout: 3000

    - action: "validate_formatting"
      target: "session"
      value: |
        [
          {
            "text": "Hello TestUser (age 25)!",
            "fg": "green",
            "styles": []
          }
        ]
      description: "Validate colored welcome message"

    - action: "wait_for_output"
      target: "session"
      value: "Main Menu:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "1{Enter}"
      description: "Select View Profile"

    - action: "wait_for_output"
      target: "session"
      value: "User Profile:"
      timeout: 3000

    - action: "validate_output"
      target: "session"
      expected: "regex:Name: TestUser.*Age: 25.*Category: Adult"
      description: "Validate profile information"

    - action: "send_input"
      target: "session"
      value: "{Enter}"
      description: "Continue to menu"

    - action: "send_input"
      target: "session"
      value: "4{Enter}"
      description: "Select Settings"

    - action: "wait_for_output"
      target: "session"
      value: "Settings Menu:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "a{Enter}"
      description: "Change name"

    - action: "wait_for_output"
      target: "session"
      value: "Enter new name:"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "UpdatedUser{Enter}"
      description: "Enter new name"

    - action: "wait_for_output"
      target: "session"
      value: "Name updated to: UpdatedUser"
      timeout: 3000

    - action: "send_input"
      target: "session"
      value: "d{Enter}"
      description: "Back to main menu"

    - action: "send_input"
      target: "session"
      value: "5{Enter}"
      description: "Exit application"

    - action: "wait_for_output"
      target: "session"
      value: "Thank you for using the application, UpdatedUser!"
      timeout: 3000

    - action: "wait_for_output"
      target: "session"
      value: "Goodbye!"
      timeout: 3000

  expected_results:
    exit_code: 0
    user_interaction_successful: true
    settings_modification_successful: true
    color_formatting_detected: true
    menu_navigation_successful: true

# Real-time Data Streaming Test
realtime_streaming_test:
  id: "realtime-streaming-test"
  name: "Real-time Data Streaming Test"
  description: "Test handling of real-time streaming data in TUI"
  type: "tui"
  agent: "TUIAgent"
  timeout: 60000

  environment:
    TERM: "xterm-256color"

  setup:
    working_directory: "/tmp"
    create_files:
      - path: "streaming_app.sh"
        content: |
          #!/bin/bash

          echo "Real-time Data Streaming Demo"
          echo "=============================="
          echo ""

          # Simulate streaming server logs
          stream_logs() {
            local count=0
            while [ $count -lt 50 ]; do
              timestamp=$(date '+%H:%M:%S')
              level=$((RANDOM % 4))
              case $level in
                0) level_name="INFO"; color="\033[32m" ;;
                1) level_name="WARN"; color="\033[33m" ;;
                2) level_name="ERROR"; color="\033[31m" ;;
                3) level_name="DEBUG"; color="\033[36m" ;;
              esac

              echo -e "${color}[$timestamp] $level_name: Log entry $count - Random data: $RANDOM\033[0m"

              # Variable delay to simulate realistic streaming
              sleep_time=$(echo "scale=2; $RANDOM/32768*0.5 + 0.1" | bc 2>/dev/null || echo "0.2")
              sleep $sleep_time

              count=$((count + 1))
            done

            echo ""
            echo -e "\033[32mStreaming complete\033[0m"
          }

          # Start streaming
          stream_logs
        permissions: "755"

  steps:
    - action: "spawn"
      target: "bash streaming_app.sh"
      description: "Start real-time streaming application"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Real-time Data Streaming Demo"
      timeout: 5000

    - action: "wait_for_output"
      target: "session"
      value: "INFO: Log entry 0"
      timeout: 10000

    - action: "wait_for_output"
      target: "session"
      value: "Log entry 10"
      timeout: 15000

    - action: "validate_output"
      target: "session"
      expected: "regex:(INFO|WARN|ERROR|DEBUG): Log entry \\d+"
      description: "Validate streaming log format"

    - action: "wait_for_output"
      target: "session"
      value: "Streaming complete"
      timeout: 30000

    - action: "capture_output"
      target: "session"
      description: "Capture complete streaming session"

  expected_results:
    streaming_data_captured: true
    multiple_log_levels_detected: true
    real_time_processing: true